import streamlit as st
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error

st.header("다변량 회귀분석 모델")

st.markdown("""
#### 입력 변수
- 나이
- 안축장
- 굴절이상
- 난시량
- 성별
- 부모의 근시도 (아빠, 엄마 근시 여부, 각 부모의 굴절력)
- 생활습관 (근거리작업시간, 야외활동시간, 수면시간)
""")

# 데이터 업로드
uploaded_file = st.file_uploader("CSV 파일 업로드 (각 변수별 컬럼 필요)", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write("데이터 미리보기", df.head())

    # 변수 선택
    all_vars = [
        "나이", "안축장", "굴절이상", "난시량", "성별",
        "아빠근시여부", "엄마근시여부", "아빠굴절력", "엄마굴절력",
        "근거리작업시간", "야외활동시간", "수면시간"
    ]
    # 실제 데이터에 있는 컬럼만 선택
    available_vars = [v for v in all_vars if v in df.columns]
    target_var = st.selectbox("예측(종속) 변수 선택", [c for c in df.columns if c not in available_vars])
    feature_vars = st.multiselect("설명(독립) 변수 선택", available_vars, default=available_vars)

    if target_var and feature_vars:
        # 결측치 처리
        data = df[feature_vars + [target_var]].dropna()
        X = data[feature_vars]
        y = data[target_var]

        # 범주형 변수 처리 (예: 성별, 부모 근시여부)
        for col in X.select_dtypes(include=['object', 'category']).columns:
            X[col] = X[col].astype('category').cat.codes

        # 학습/테스트 분할
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # 회귀모델 학습
        model = LinearRegression()
        model.fit(X_train, y_train)

        # 예측 및 평가
        y_pred = model.predict(X_test)
        r2 = r2_score(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)

        st.subheader("회귀계수")
        coef_df = pd.DataFrame({
            "변수": X.columns,
            "회귀계수": model.coef_
        })
        st.write(coef_df)

        st.write(f"절편 (Intercept): {model.intercept_:.4f}")
        st.write(f"테스트 데이터 R²: {r2:.4f}")
        st.write(f"테스트 데이터 MSE: {mse:.4f}")

        st.subheader("테스트 데이터 예측 결과 (일부)")
        result_df = X_test.copy()
        result_df["실제값"] = y_test
        result_df["예측값"] = y_pred
        st.write(result_df.head())

        st.download_button(
            label="예측 결과 CSV 다운로드",
            data=result_df.to_csv(index=False).encode("utf-8-sig"),
            file_name="regression_prediction.csv",
            mime="text/csv"
        )
    else:
        st.info("예측 변수와 설명 변수를 선택하세요.")
else:
    st.info("CSV 파일을 업로드하세요.")
